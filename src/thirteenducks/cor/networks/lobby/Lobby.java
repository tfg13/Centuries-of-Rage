/*
 *  Copyright 2008, 2009, 2010:
 *   Tobias Fleig (tfg[AT]online[DOT]de),
 *   Michael Haas (mekhar[AT]gmx[DOT]de),
 *   Johannes Kattinger (johanneskattinger[AT]gmx[DOT]de)
 *
 *  - All rights reserved -
 *
 *
 *  This file is part of Centuries of Rage.
 *
 *  Centuries of Rage is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Centuries of Rage is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Centuries of Rage.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package thirteenducks.cor.networks.lobby;

import thirteenducks.cor.game.client.ClientCore;
import thirteenducks.cor.networks.client.ClientNetController;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout.Group;

/**
 *
 * @author michael
 */
public class Lobby extends javax.swing.JFrame {

    static byte lobbycomid = 14;        // die cmd-id für lobby-kommunikation
    Vector<String> list;                // Die Liste für jList1
    ClientNetController clientcore;     // Clientcore-Referenz zum Nachrichten senden
    public String playername;                  // Der Name des lokalen Spielers
    boolean host;                       // ist der lokale Spieler host?
    boolean ready = false;              // Ist der lokale Spieler bereit?
    ClientCore.InnerClient rgi;
    ArrayList<LobbySlot> slots;

    /** Creates new form RogLobby */
    public Lobby() {
        list = new Vector<String>();
        host = false;
        initComponents();
        this.setLocationRelativeTo(null);


        print("Centuries of Rage BETA");
        print("connecting to the server, please wait...");

    }

    /**
     * Initialisiert die Lobby
     */
    public void initlobby(ClientNetController cnc, ClientCore.InnerClient newinner) {
        rgi = newinner;
        clientcore = cnc;
        slots = new ArrayList<LobbySlot>();
        try {
            //playername = (String) clientcore.rgi.configs.get("playername");
            playername = clientcore.rgi.playername;
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.print("MÄÄÄÄP, Spielername nicht definiert!\n");
        }

        jButton2.setIcon(new javax.swing.ImageIcon("img/lobby/mute.png"));
        // Namen vom Server anfordern:
        send("N" + playername);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textfield = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CoR: Lobby");
        setName(null);

        textfield.setText("enter comments here...");
        textfield.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textfieldMouseClicked(evt);
            }
        });
        textfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textfieldKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Centuries of Rage Network Lobby");

        jButton1.setText("you are not ready");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(195, 192, 189));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 211, Short.MAX_VALUE)
        );

        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(textfield, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 357, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldKeyPressed
        if (evt.getKeyCode() == 10 && !textfield.getText().equals("")) {

            send('7' + playername + ": " + textfield.getText());
            textfield.setText("");
        }
    }//GEN-LAST:event_textfieldKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (ready == true) {
            ready = false;
            jButton1.setText("you are not ready");
            send('4' + playername);
        } else {
            ready = true;
            jButton1.setText("you are ready");
            send('3' + playername);
        }




    }//GEN-LAST:event_jButton1ActionPerformed

    private void textfieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textfieldMouseClicked
        if (textfield.getText().equalsIgnoreCase("enter comments here...")) {
            textfield.setText("");
        }
    }//GEN-LAST:event_textfieldMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        rgi.rogSound.toggleMute();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField textfield;
    // End of variables declaration//GEN-END:variables


    /* Gibt text in der lobbykonsole aus */
    void print(String text) {
        list.add(text);
        jList1.setListData(list);
    }

    /**
     * Sendet eine Nachricht an den Server
     * @param s
     */
    public void send(String s) {
        //System.out.println("Lobby von " + this.playername + " sendet " + s);
        clientcore.broadcastString((s + '\0'), lobbycomid);
    }

    /**
     * Zeichnet das Panel mit den Spielerslots neu
     */
    void updatepanel() {
        try {
            jPanel1.removeAll();

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);

            jPanel1.removeAll();

            Group horgroup = jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER);
            Group vergroup = jPanel1Layout.createSequentialGroup();

            for (LobbySlot s : slots) {
                horgroup.addComponent(s);
                vergroup.addComponent(s);
            }


            jPanel1Layout.setHorizontalGroup(horgroup);
            jPanel1Layout.setVerticalGroup(vergroup);
        } catch (Exception exception) {
            System.out.println("FIXME: Lobby wirft wieder Exceptions");
        }
    }

    public void addPlayer(String name) {
        LobbySlot newslot = new LobbySlot(this, name);
        if (name.equals(this.playername)) {
            newslot.enablecontrols();
            try {
                if (this.clientcore.connectionTarget.equals(InetAddress.getByName("127.0.0.1")) || this.clientcore.connectionTarget.equals(InetAddress.getByName("localhost"))) {
                    send("8" + name);
                }
            } catch (UnknownHostException ex) {
                ex.printStackTrace();
            }
        }
        slots.add(newslot);
        updatepanel();
    }

    public void removePlayer(String name_t) {

        if (getSlot(name_t) != null) {
            slots.remove(getSlot(name_t));
            updatepanel();
        }
    }

    public void changePlayerColor(String name_t, String color) {
        if (getSlot(name_t) != null) {
            getSlot(name_t).changecolour(color);
        }
    }

    public void changePlayerTeam(String name_t, int team) {

        if (getSlot(name_t) != null) {
            getSlot(name_t).changeteam(team);
        }
    }

    public void changePlayerRace(String name_t, int race) {

        if (getSlot(name_t) != null) {
            getSlot(name_t).changerace(race);
        }
    }

    public void changePlayerStatus(String name_t, boolean ready) {
        if (getSlot(name_t) != null) {
            getSlot(name_t).changeReady(ready);
        }
    }

    public void chatMessage(String message) {
        print(message);
    }

    public void setHostPlayer(String name_t) {
        if (getSlot(name_t) != null) {
            getSlot(name_t).setHost();
        }
        if (this.playername.equals(name_t)) {
            for (LobbySlot s : this.slots) {
                s.enablecontrols();
            }
        }
    }

    // macht das Lobby-Fenster unsichtbar
    public void hideLobby() {
        this.setVisible(false);
    }

    private LobbySlot getSlot(String name_t) {
        for (LobbySlot s : slots) {
            if (s.name.equals(name_t)) {
                return s;
            }
        }
        System.out.print("LOBBY: Player " + name_t + " not found!\n");
        return null;
    }
}// Klassenende

